{"version":3,"file":"cts-lib.js","sources":["../../../projects/cts-lib/src/lib/cts-constant-token.service.ts","../../../projects/cts-lib/src/lib/cts.service.ts","../../../projects/cts-lib/src/lib/chemify.service.ts","../../../projects/cts-lib/src/lib/cts-lib.module.ts","../../../projects/cts-lib/src/public-api.ts","../../../projects/cts-lib/src/cts-lib.ts"],"sourcesContent":["import {InjectionToken} from '@angular/core';\nimport {CtsConstant} from './cts-constant';\n\nexport const CtsConstantTokenService = new InjectionToken<CtsConstant>(\n  'CtsConstant'\n);\n","import {Inject, Injectable, Optional} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {NGXLogger} from 'ngx-logger';\nimport {CtsConstantTokenService} from './cts-constant-token.service';\nimport {CtsConstant} from './cts-constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CtsService {\n  apiUrl;\n\n  constructor(@Inject(HttpClient) public http: HttpClient, @Inject(NGXLogger) public logger: NGXLogger,\n              @Inject(CtsConstantTokenService) public config: CtsConstant) {\n    this.apiUrl = config.apiUrl;\n  }\n\n  private serializeData = (data) => {\n    if (typeof data !== 'object' && data !== null) {\n      return ( ( data == null ) ? '' : data.toString() );\n    }\n\n    const buffer = [];\n\n    for (const name in data) {\n      if (!data.hasOwnProperty(name)) {\n        continue;\n      }\n\n      const value = data[name];\n      buffer.push(encodeURIComponent(name) + '=' + encodeURIComponent(( value == null ) ? '' : value));\n    }\n\n    const source = buffer.join('&').replace(/%20/g, '+');\n\n    return (source);\n  }\n\n  /**\n   * converts the given Molecule to an InChI Key\n   */\n  convertToInchiKey(molecule, callback, errorCallback): void {\n    const serializedMolecule = this.serializeData(molecule);\n    this.http.post(`${this.apiUrl}/service/moltoinchi`, {mol: serializedMolecule},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}}).subscribe((res: any) => {\n      this.logger.debug('received: ' + res);\n      if (typeof res !== 'undefined') {\n        if (typeof res.error !== 'undefined') {\n          if (errorCallback) {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n\n        else if (res.inchikey) {\n           if (res.inchikey === '') {\n             callback(null);\n           }\n           else {\n             callback(res);\n           }\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }}, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * converts an InChI Key to a molecule\n   */\n  convertInchiKeyToMol(inchiKey, callback, errorCallback): void {\n    this.http.get(`${this.apiUrl}/service/inchikeytomol/${inchiKey}`).subscribe((res: any) => {\n      if (typeof res !== 'undefined') {\n        if (res.error !== '') {\n          if (errorCallback) {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n        else if (res.molecule) {\n          if (res.molecule === '' || res.molecule === null) {\n            callback(null);\n          }\n          else {\n            callback(res.molecule);\n          }\n        }\n\n      }\n    }, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * utilizes chemspider to convert from a smiles to an inchi\n   */\n  convertSmileToInChICode(smiles, callback, errorCallback): void {\n    const serializedSmiles = this.serializeData(smiles);\n    this.http.post(`${this.apiUrl}/service/smiletoinchi`, {smiles: serializedSmiles.trim()},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}}).subscribe((res: any) => {\n        if (typeof res !== 'undefined') {\n          if (typeof res.error !== 'undefined') {\n            if (typeof errorCallback !== 'undefined') {\n              errorCallback(res.error);\n            }\n            else {\n              this.logger.warn('no error message provided');\n            }\n          }\n          else if (typeof res.inchikey !== 'undefined') {\n            if (res.inchikey === '') {\n              callback(null);\n            }\n            else {\n              callback(res);\n            }\n          }\n        }\n        else {\n          this.logger.debug('no data object id defined!');\n        }\n    }, (error) => {\n      if (typeof errorCallback !== 'undefined') {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * converts an inchi code to an inchi keyÃŸ\n   */\n  convertInChICodeToKey(inchiCode, callback, errorCallback): void {\n    const serializedInchiCode = this.serializeData(inchiCode);\n    this.http.post(`${this.apiUrl}/service/inchicodetoinchikey`, {inchicode: serializedInchiCode},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}})\n    .subscribe((res: any) => {\n\n      if (typeof res !== 'undefined') {\n        if (typeof res.error !== 'undefined') {\n          if (typeof errorCallback !== 'undefined') {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n        else if (typeof res.inchikey !== 'undefined') {\n          if (res.inchikey === '') {\n            callback(null);\n          }\n          else {\n            callback(res.inchikey);\n          }\n        }\n\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }, (error) => {\n      if (typeof errorCallback !== 'undefined') {\n        errorCallback(error);\n      }\n      else {\n        if (error !== null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * provides us with the molfile for this key\n   */\n  convertInChICodeToMol(inchiCode, callback, errorCallback): void {\n    const serializedInchiCode = this.serializeData(inchiCode);\n    this.http.post(`${this.apiUrl}/service/inchitomol`, { inchicode: serializedInchiCode },\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}})\n      .subscribe((res: any) => {\n        if (typeof res !== 'undefined') {\n          if (typeof res.error !== 'undefined') {\n            if (typeof errorCallback !== 'undefined') {\n              errorCallback(res.error);\n            }\n            else {\n              this.logger.warn('no error message provided!');\n            }\n          }\n          else if (typeof res.molecule !== 'undefined') {\n            if (res.molecule === '') {\n              callback(null);\n            }\n            else {\n              callback(res.molecule);\n            }\n          }\n\n        }\n        else {\n          this.logger.debug('no data object is defined!');\n        }\n      }, (error) => {\n        if (typeof errorCallback !== 'undefined') {\n          errorCallback(error);\n        }\n        else {\n          if (error != null) {\n            this.logger.warn('error: ' + error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n      });\n    }\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {NGXLogger} from 'ngx-logger';\nimport {CtsConstantTokenService} from './cts-constant-token.service';\nimport {CtsConstant} from './cts-constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChemifyService{\n  apiUrl;\n  constructor(@Inject(HttpClient) public http: HttpClient, @Inject(NGXLogger) public logger: NGXLogger,\n              @Inject(CtsConstantTokenService) public config: CtsConstant) {\n    this.apiUrl = config.apiUrl;\n  }\n\n  /**\n   * converts the given name to an InChI Key\n   */\n  nameToInChIKey(chemicalName, callback, errorCallback): void{\n    this.http.get(`${this.apiUrl}/chemify/rest/identify/${encodeURI(chemicalName)}`)\n      .subscribe((res) => {\n        const result = '';\n\n        if (typeof res !== 'undefined') {\n          const data = res;\n          if (Array.isArray(data)) {\n            if (data.length > 0) {\n              const topHit = data[0];\n              if (typeof topHit.result !== 'undefined') {\n                if (topHit.result === 'nothing found') {\n                  callback(null);\n                }\n                else {\n                  callback(topHit.result);\n                }\n              }\n            }\n          }\n        }\n      }, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n      });\n  }\n}\n","import {ModuleWithProviders, NgModule, Optional, SkipSelf} from '@angular/core';\nimport {HttpClientModule} from '@angular/common/http';\nimport {LoggerModule, NgxLoggerLevel} from 'ngx-logger';\n\nimport {CtsService} from './cts.service';\nimport {ChemifyService} from './chemify.service';\nimport {CtsConstant} from './cts-constant';\nimport {CtsConstantTokenService} from './cts-constant-token.service';\n\n@NgModule({\n  imports: [\n    LoggerModule.forRoot({\n      level: NgxLoggerLevel.DEBUG,\n      serverLogLevel: NgxLoggerLevel.OFF\n    }),\n    HttpClientModule\n  ]\n})\nexport class CtsLibModule {\n  static forRoot(config: CtsConstant): ModuleWithProviders<CtsLibModule> {\n    return {\n      ngModule: CtsLibModule,\n      providers: [\n        CtsService,\n        ChemifyService,\n        {\n          provide: CtsConstantTokenService,\n          useValue: config\n        }\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of cts-lib\n */\n\nexport * from './lib/cts.service';\nexport * from './lib/chemify.service';\nexport * from './lib/cts-lib.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}