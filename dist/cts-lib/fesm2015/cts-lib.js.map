{"version":3,"file":"cts-lib.js","sources":["../../../projects/cts-lib/src/lib/cts-constants.ts","../../../projects/cts-lib/src/lib/cts.service.ts","../../../projects/cts-lib/src/lib/chemify.service.ts","../../../projects/cts-lib/src/lib/cts-lib.module.ts","../../../projects/cts-lib/src/public-api.ts","../../../projects/cts-lib/src/cts-lib.ts"],"sourcesContent":["export class CtsConstants{\n  public static apiUrl: String = \"http://cts.fiehnlab.ucdavis.edu\";\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {NGXLogger} from 'ngx-logger';\nimport {CtsConstants} from './cts-constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CtsService {\n\n  constructor(@Inject(HttpClient) private http: HttpClient, @Inject(NGXLogger) private logger: NGXLogger) { }\n\n  private serializeData = (data) => {\n    if (typeof data !== 'object' && data !== null) {\n      return ( ( data == null ) ? '' : data.toString() );\n    }\n\n    const buffer = [];\n\n    for (const name in data) {\n      if (!data.hasOwnProperty(name)) {\n        continue;\n      }\n\n      const value = data[name];\n      buffer.push(encodeURIComponent(name) + '=' + encodeURIComponent(( value == null ) ? '' : value));\n    }\n\n    const source = buffer.join('&').replace(/%20/g, '+');\n\n    return (source);\n  }\n\n  /**\n   * converts the given Molecule to an InChI Key\n   */\n  convertToInchiKey =  (molecule, callback, errorCallback) => {\n    const serializedMolecule = this.serializeData(molecule);\n    this.http.post(`${CtsConstants.apiUrl}/service/moltoinchi`, {mol: serializedMolecule},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}}).subscribe((res: any) => {\n      this.logger.debug('received: ' + res);\n      if (typeof res !== 'undefined') {\n        if (typeof res.error !== 'undefined') {\n          if (errorCallback) {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n\n        else if (res.inchikey) {\n           if (res.inchikey === '') {\n             callback(null);\n           }\n           else {\n             callback(res);\n           }\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }}, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * converts an InChI Key to a molecule\n   */\n  convertInchiKeyToMol = (inchiKey, callback, errorCallback) => {\n    this.http.get(`${CtsConstants.apiUrl}/service/inchikeytomol/${inchiKey}`).subscribe((res: any) => {\n      if (typeof res !== 'undefined') {\n        if (res.error !== '') {\n          if (errorCallback) {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n        else if (res.molecule) {\n          if (res.molecule === '' || res.molecule === null) {\n            callback(null);\n          }\n          else {\n            callback(res.molecule);\n          }\n        }\n\n      }\n    }, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * utilizes chemspider to convert from a smiles to an inchi\n   */\n  convertSmileToInChICode =  (smiles, callback, errorCallback) => {\n    const serializedSmiles = this.serializeData(smiles);\n    this.http.post(`${CtsConstants.apiUrl}/service/smiletoinchi`, {smiles: serializedSmiles.trim()},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}}).subscribe((res: any) => {\n        if (typeof res !== 'undefined') {\n          if (typeof res.error !== 'undefined') {\n            if (typeof errorCallback !== 'undefined') {\n              errorCallback(res.error);\n            }\n            else {\n              this.logger.warn('no error message provided');\n            }\n          }\n          else if (typeof res.inchikey !== 'undefined') {\n            if (res.inchikey === '') {\n              callback(null);\n            }\n            else {\n              callback(res);\n            }\n          }\n        }\n        else {\n          this.logger.debug('no data object id defined!');\n        }\n    }, (error) => {\n      if (typeof errorCallback !== 'undefined') {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * converts an inchi code to an inchi keyÃŸ\n   */\n  convertInChICodeToKey = (inchiCode, callback, errorCallback) => {\n    const serializedInchiCode = this.serializeData(inchiCode);\n    this.http.post(`${CtsConstants.apiUrl}/service/inchicodetoinchikey`, {inchicode: serializedInchiCode},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}})\n    .subscribe((res: any) => {\n\n      if (typeof res !== 'undefined') {\n        if (typeof res.error !== 'undefined') {\n          if (typeof errorCallback !== 'undefined') {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n        else if (typeof res.inchikey !== 'undefined') {\n          if (res.inchikey === '') {\n            callback(null);\n          }\n          else {\n            callback(res.inchikey);\n          }\n        }\n\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }, (error) => {\n      if (typeof errorCallback !== 'undefined') {\n        errorCallback(error);\n      }\n      else {\n        if (error !== null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * provides us with the molfile for this key\n   */\n  convertInChICodeToMol = (inchiCode, callback, errorCallback) => {\n    const serializedInchiCode = this.serializeData(inchiCode);\n    return this.http.post(`${CtsConstants.apiUrl}/service/inchitomol`, { inchicode: serializedInchiCode },\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}})\n      .subscribe((res: any) => {\n        if (typeof res !== 'undefined') {\n          if (typeof res.error !== 'undefined') {\n            if (typeof errorCallback !== 'undefined') {\n              errorCallback(res.error);\n            }\n            else {\n              this.logger.warn('no error message provided!');\n            }\n          }\n          else if (typeof res.molecule !== 'undefined') {\n            if (res.molecule === '') {\n              callback(null);\n            }\n            else {\n              callback(res.molecule);\n            }\n          }\n\n        }\n        else {\n          this.logger.debug('no data object is defined!');\n        }\n      }, (error) => {\n        if (typeof errorCallback !== 'undefined') {\n          errorCallback(error);\n        }\n        else {\n          if (error != null) {\n            this.logger.warn('error: ' + error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n      });\n    }\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {NGXLogger} from 'ngx-logger';\nimport {CtsConstants} from './cts-constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChemifyService{\n  constructor(@Inject(HttpClient) private http: HttpClient, @Inject(NGXLogger) private logger: NGXLogger) {\n  }\n\n  /**\n   * converts the given name to an InChI Key\n   */\n  nameToInChIKey = (chemicalName, callback, errorCallback) => {\n\n    this.http.get(`${CtsConstants.apiUrl}/chemify/rest/identify/${encodeURI(chemicalName)}`)\n      .subscribe((res) => {\n        const result = '';\n\n        if (typeof res !== 'undefined') {\n          const data = res;\n          if (Array.isArray(data)) {\n            if (data.length > 0) {\n              const topHit = data[0];\n              if (typeof topHit.result !== 'undefined') {\n                if (topHit.result === 'nothing found') {\n                  callback(null);\n                }\n                else {\n                  callback(topHit.result);\n                }\n              }\n            }\n          }\n        }\n      }, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n      });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {HttpClientModule} from '@angular/common/http';\nimport {LoggerModule, NgxLoggerLevel} from 'ngx-logger';\nimport {CtsConstants} from './cts-constants';\nimport {CtsService} from './cts.service';\nimport {ChemifyService} from './chemify.service';\n\n@NgModule({\n  imports: [\n    LoggerModule.forRoot({\n      level: NgxLoggerLevel.DEBUG,\n      serverLogLevel: NgxLoggerLevel.OFF\n    }),\n    HttpClientModule\n  ],\n  providers: [\n    CtsConstants,\n    CtsService,\n    ChemifyService\n  ]\n})\nexport class CtsLibModule { }\n","/*\n * Public API Surface of cts-lib\n */\n\nexport * from './lib/cts.service';\nexport * from './lib/chemify.service';\nexport * from './lib/cts-lib.module';\nexport * from './lib/cts-constants';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}