{"version":3,"sources":["../../../projects/cts-lib/src/lib/cts-constants.ts","../../../projects/cts-lib/src/lib/cts.service.ts","../../../projects/cts-lib/src/lib/chemify.service.ts","../../../projects/cts-lib/src/lib/cts-lib.module.ts"],"names":["CtsConstants","apiUrl","http","logger","_this","this","serializeData","data","toString","buffer","name","hasOwnProperty","value","push","encodeURIComponent","join","replace","convertToInchiKey","molecule","serializedMolecule","post","mol","headers","Content-Type","convertInchiKeyToMol","inchiKey","get","convertSmileToInChICode","smiles","serializedSmiles","trim","convertInChICodeToKey","inchiCode","serializedInchiCode","inchicode","convertInChICodeToMol","CtsService","i0","ɵɵinject","HttpClient","NGXLogger","factory","ɵfac","providedIn","nameToInChIKey","chemicalName","encodeURI","ChemifyService","CtsLibModule","providers","imports","LoggerModule","forRoot","level","NgxLoggerLevel","DEBUG","serverLogLevel","OFF","HttpClientModule","i2"],"mappings":"2aAAA,aACgBA,EAAAC,OAAiB,wCCS/B,SAAwCC,EAA6CC,GAArF,IAAAC,EAAAC,KAAwCA,KAAAH,KAAAA,EAA6CG,KAAAF,OAAAA,EAE7EE,KAAAC,cAAgB,SAACC,GACvB,GAAoB,iBAATA,GAA8B,OAATA,EAC9B,OAAmB,MAARA,EAAiB,GAAKA,EAAKC,WAGxC,IAAIC,EAAS,GAEb,IAAK,IAAIC,KAAQH,EACf,GAAKA,EAAKI,eAAeD,GAAzB,CAIA,IAAIE,EAAQL,EAAKG,GACjBD,EAAOI,KAAKC,mBAAmBJ,GAAQ,IAAMI,mBAA8B,MAATF,EAAkB,GAAKA,IAK3F,OAFaH,EAAOM,KAAK,KAAKC,QAAQ,OAAQ,MAWhDX,KAAAY,kBAAqB,SAACC,GACpB,IAAIC,EAAqBf,EAAKE,cAAcY,GAC5C,OAAOd,EAAKF,KAAKkB,KAAQpB,EAAaC,OAAM,sBAAuB,CAACoB,IAAKF,GACvE,CAACG,QAAS,CAACC,eAAgB,uDAiD/BlB,KAAAmB,qBAAuB,SAACC,GACtB,OAAOrB,EAAKF,KAAKwB,IAAO1B,EAAaC,OAAM,0BAA0BwB,IA6CvEpB,KAAAsB,wBAA2B,SAACC,GAC1B,IAAIC,EAAmBzB,EAAKE,cAAcsB,GAC1C,OAAOxB,EAAKF,KAAKkB,KAAQpB,EAAaC,OAAM,wBAAyB,CAAC2B,OAAQC,EAAiBC,QAC7F,CAACR,QAAS,CAACC,eAAgB,uDA8C/BlB,KAAA0B,sBAAwB,SAACC,GACvB,IAAIC,EAAsB7B,EAAKE,cAAc0B,GAC7C,OAAO5B,EAAKF,KAAKkB,KAAQpB,EAAaC,OAAM,+BAAgC,CAACiC,UAAWD,GACtF,CAACX,QAAS,CAACC,eAAgB,uDAgD/BlB,KAAA8B,sBAAwB,SAACH,GACvB,IAAIC,EAAsB7B,EAAKE,cAAc0B,GAC7C,OAAO5B,EAAKF,KAAKkB,KAAQpB,EAAaC,OAAM,sBAAuB,CAAEiC,UAAWD,GAC9E,CAACX,QAAS,CAACC,eAAgB,yFAxOpBa,GAAUC,EAAAC,SAEDC,EAAAA,YAAUF,EAAAC,SAAoCE,EAAAA,iDAFvDJ,EAAUK,QAAVL,EAAUM,KAAAC,WAFT,eCGZ,SAAwCzC,EAA6CC,GAArF,IAAAC,EAAAC,KAAwCA,KAAAH,KAAAA,EAA6CG,KAAAF,OAAAA,EAQrFE,KAAAuC,eAAiB,SAACC,GAEhB,OAAOzC,EAAKF,KAAKwB,IAAO1B,EAAaC,OAAM,0BAA0B6C,UAAUD,uCAXtEE,GAAcV,EAAAC,SACLC,EAAAA,YAAUF,EAAAC,SAAoCE,EAAAA,iDADvDO,EAAcN,QAAdM,EAAcL,KAAAC,WAFb,eCed,6CAAaK,iEAAAA,IAAYC,UANZ,CACTjD,EACAoC,EACAW,GACDG,QAAA,CAXQ,CACPC,EAAAA,aAAaC,QAAQ,CACnBC,MAAOC,EAAAA,eAAeC,MACtBC,eAAgBF,EAAAA,eAAeG,MAEjCC,EAAAA,sFAQSV,EAAY,CAAAE,QAAA,CAAAS,EAAAR,aARrBO,EAAAA","sourcesContent":["export class CtsConstants{\n  public static apiUrl: String = \"http://cts.fiehnlab.ucdavis.edu\";\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {NGXLogger} from \"ngx-logger\";\nimport {CtsConstants} from \"./cts-constants\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CtsService {\n\n  constructor(@Inject(HttpClient) private http: HttpClient, @Inject(NGXLogger) private logger: NGXLogger) { }\n\n  private serializeData = (data) => {\n    if (typeof data !== 'object' && data !== null) {\n      return ( ( data == null ) ? \"\" : data.toString() );\n    }\n\n    let buffer = [];\n\n    for (let name in data) {\n      if (!data.hasOwnProperty(name)) {\n        continue;\n      }\n\n      let value = data[name];\n      buffer.push(encodeURIComponent(name) + \"=\" + encodeURIComponent(( value == null ) ? \"\" : value));\n    }\n\n    let source = buffer.join(\"&\").replace(/%20/g, \"+\");\n\n    return (source);\n  }\n\n  /**\n   * converts the given Molecule to an InChI Key\n   * @param molecule\n   * @param callback\n   * @param errorCallback\n   */\n  convertToInchiKey =  (molecule) => {\n    let serializedMolecule = this.serializeData(molecule);\n    return this.http.post(`${CtsConstants.apiUrl}/service/moltoinchi`, {mol: serializedMolecule},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}});\n    /*\n    .then((res) => {\n\n      this.logger.debug('received: ' + res);\n\n      if (res) {\n        if (res[\"error\"]) {\n          if (errorCallback) {\n            errorCallback(res[\"error\"]);\n          }\n          else {\n            this.logger.warn(\"no error message provided!\");\n          }\n        }\n        else if (res[\"inchikey\"]) {\n          if (res[\"inchikey\"] === \"\") {\n            callback(null);\n          }\n          else {\n            callback(res);\n          }\n        }\n\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }).catch((error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn(\"no error message provided!\");\n        }\n      }\n    }); */\n  };\n\n  /**\n   * converts an InChI Key to a molecule\n   * @param inchiKey\n   * @param callback\n   * @param errorCallback\n   */\n  convertInchiKeyToMol = (inchiKey) => {\n    return this.http.get(`${CtsConstants.apiUrl}/service/inchikeytomol/${inchiKey}`);\n      /*.subscribe(\n      (res) => {\n          if (res[\"data\"]) {\n\n            let data = res[\"data\"];\n            if (data.error) {\n              if (errorCallback) {\n                errorCallback(data.error);\n              }\n              else {\n                this.logger.warn(\"no error message provided!\");\n              }\n            }\n            else if (data.molecule) {\n              if (data.molecule === \"\" || data.molecule === null) {\n                callback(null);\n              }\n              else {\n                callback(data.molecule);\n              }\n            }\n\n          }\n        }).catch((error) => {\n          if (errorCallback) {\n            errorCallback(error);\n          }\n          else {\n            if (error != null) {\n              this.logger.warn('error: ' + error);\n            }\n            else {\n              this.logger.warn(\"no error message provided!\");\n            }\n          }\n        });*/\n  };\n\n  /**\n   * utilizes chemspider to convert from a smiles to an inchi\n   * @param smiles\n   * @param callback\n   * @param errorCallback\n   */\n  convertSmileToInChICode =  (smiles) => {\n    let serializedSmiles = this.serializeData(smiles);\n    return this.http.post(`${CtsConstants.apiUrl}/service/smiletoinchi`, {smiles: serializedSmiles.trim()},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}})\n      /*\n      .then((res) => {\n        if (res) {\n          if (res[\"error\"]) {\n            if (errorCallback) {\n              errorCallback(res[\"errorr\"]);\n            }\n            else {\n              this.logger.warn(\"no error message provided!\");\n            }\n          }\n          else if (res[\"inchikey\"]) {\n            if (res[\"inchikey\"] === \"\") {\n              callback(null);\n            }\n            else {\n              callback(res);\n            }\n          }\n\n        }\n        else {\n          //$log.debug('no data object is defined!');\n        }\n      }).catch((error) => {\n        if (errorCallback) {\n          errorCallback(error);\n        }\n        else {\n          if (error != null) {\n            this.logger.warn('error: ' + error);\n          }\n          else {\n            this.logger.warn(\"no error message provided!\");\n          }\n        }\n      }); */\n  };\n\n  /**\n   * converts an inchi code to an inchi keyß\n   * @param inchiCode\n   * @param callback\n   * @param errorCallback\n   */\n  convertInChICodeToKey = (inchiCode) => {\n    let serializedInchiCode = this.serializeData(inchiCode);\n    return this.http.post(`${CtsConstants.apiUrl}/service/inchicodetoinchikey`, {inchicode: serializedInchiCode},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}});\n    /*\n    .then((res) => {\n\n      if (res) {\n\n        if (res[\"error\"]) {\n          if (errorCallback) {\n            errorCallback(res[\"error\"]);\n          }\n          else {\n            this.logger.warn(\"no error message provided!\");\n          }\n        }\n        else if (res[\"inchikey\"]) {\n          if (res[\"inchikey\"] === \"\") {\n            callback(null);\n          }\n          else {\n            callback(res[\"inchikey\"]);\n          }\n        }\n\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }).catch((error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn(\"no error message provided!\");\n        }\n      }\n    }); */\n  };\n\n  /**\n   * provides us with the molfile for this key\n   * @param inchiCode\n   * @param callback\n   * @param errorCallback\n   */\n  convertInChICodeToMol = (inchiCode) => {\n    let serializedInchiCode = this.serializeData(inchiCode);\n    return this.http.post(`${CtsConstants.apiUrl}/service/inchitomol`, { inchicode: serializedInchiCode },\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}});\n    /*\n      .then((res) => {\n        if (res) {\n\n          if (res[\"error\"]) {\n            if (errorCallback) {\n              errorCallback(res[\"error\"]);\n            }\n            else {\n              this.logger.warn(\"no error message provided!\");\n            }\n          }\n          else if (res[\"molecule\"]) {\n            if (res[\"molecule\"] === \"\") {\n              callback(null);\n            }\n            else {\n              callback(res[\"molecule\"]);\n            }\n          }\n\n        }\n        else {\n          this.logger.debug('no data object is defined!');\n        }\n      }).catch((error) => {\n        if (errorCallback) {\n          errorCallback(error);\n        }\n        else {\n          if (error != null) {\n            this.logger.warn('error: ' + error);\n          }\n          else {\n            this.logger.warn(\"no error message provided!\");\n          }\n        }\n      }); */\n    };\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {NGXLogger} from \"ngx-logger\";\nimport {CtsConstants} from \"./cts-constants\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChemifyService{\n  constructor(@Inject(HttpClient) private http: HttpClient, @Inject(NGXLogger) private logger: NGXLogger) {\n  }\n\n  /**\n   * converts the given name to an InChI Key\n   * @param chemicalName\n   * @param callback\n   */\n  nameToInChIKey = (chemicalName) => {\n\n    return this.http.get(`${CtsConstants.apiUrl}/chemify/rest/identify/${encodeURI(chemicalName)}`);\n    /*\n      .then((res) => {\n        let result = \"\";\n\n        if (res[\"data\"]) {\n          let data = res[\"data\"];\n          if (Array.isArray(data)) {\n            if (data.length > 0) {\n              let topHit = data[0];\n              if (topHit.result) {\n                if (topHit.result === 'nothing found') {\n                  callback(null);\n                }\n                else {\n                  callback(topHit.result);\n                }\n              }\n            }\n          }\n        }\n      }).catch((error) =>{\n        if (errorCallback) {\n          errorCallback(error);\n        }\n        else {\n          if (error != null) {\n            this.logger.warn('error: ' + error);\n          }\n          else {\n            this.logger.warn(\"no error message provided!\");\n          }\n        }\n      });\n     */\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {HttpClientModule} from \"@angular/common/http\";\nimport{LoggerModule, NgxLoggerLevel} from \"ngx-logger\";\nimport {CtsConstants} from \"./cts-constants\";\nimport {CtsService} from \"./cts.service\";\nimport {ChemifyService} from \"./chemify.service\";\n\n@NgModule({\n  imports: [\n    LoggerModule.forRoot({\n      level: NgxLoggerLevel.DEBUG,\n      serverLogLevel: NgxLoggerLevel.OFF\n    }),\n    HttpClientModule\n  ],\n  providers: [\n    CtsConstants,\n    CtsService,\n    ChemifyService\n  ]\n})\nexport class CtsLibModule { }\n"]}