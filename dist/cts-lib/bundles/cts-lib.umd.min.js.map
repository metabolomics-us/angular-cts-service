{"version":3,"sources":["../../../projects/cts-lib/src/lib/cts-constants.ts","../../../projects/cts-lib/src/lib/cts.service.ts","../../../projects/cts-lib/src/lib/chemify.service.ts","../../../projects/cts-lib/src/lib/cts-lib.module.ts"],"names":["this","apiUrl","http","logger","ctsConstant","_this","serializeData","data","toString","buffer","name","hasOwnProperty","value","push","encodeURIComponent","join","replace","convertToInchiKey","molecule","callback","errorCallback","serializedMolecule","post","mol","headers","Content-Type","subscribe","res","debug","error","warn","inchikey","convertInchiKeyToMol","inchiKey","get","convertSmileToInChICode","smiles","serializedSmiles","trim","convertInChICodeToKey","inchiCode","serializedInchiCode","inchicode","convertInChICodeToMol","console","log","CtsService","i0","ɵɵinject","HttpClient","NGXLogger","CtsConstants","factory","ɵfac","providedIn","ctsConstants","nameToInChIKey","chemicalName","encodeURI","Array","isArray","length","topHit","result","ChemifyService","CtsLibModule","forRoot","config","ngModule","providers","provide","useValue","imports","LoggerModule","level","NgxLoggerLevel","DEBUG","serverLogLevel","OFF","HttpClientModule","i2"],"mappings":"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","sourcesContent":["export class CtsConstants{\n  apiUrl = '';\n}\n","import {Inject, Injectable, Optional} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {NGXLogger} from 'ngx-logger';\nimport {CtsConstants} from './cts-constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CtsService {\n  apiUrl;\n\n  constructor(@Inject(HttpClient) public http: HttpClient, @Inject(NGXLogger) public logger: NGXLogger,\n              @Inject(CtsConstants) public ctsConstant: CtsConstants) {\n    this.apiUrl = ctsConstant.apiUrl;\n    console.log(this.ctsConstant.apiUrl);\n    console.log(this.apiUrl);\n  }\n\n  private serializeData = (data) => {\n    if (typeof data !== 'object' && data !== null) {\n      return ( ( data == null ) ? '' : data.toString() );\n    }\n\n    const buffer = [];\n\n    for (const name in data) {\n      if (!data.hasOwnProperty(name)) {\n        continue;\n      }\n\n      const value = data[name];\n      buffer.push(encodeURIComponent(name) + '=' + encodeURIComponent(( value == null ) ? '' : value));\n    }\n\n    const source = buffer.join('&').replace(/%20/g, '+');\n\n    return (source);\n  }\n\n  /**\n   * converts the given Molecule to an InChI Key\n   */\n  convertToInchiKey =  (molecule, callback, errorCallback) => {\n    const serializedMolecule = this.serializeData(molecule);\n    this.http.post(`${this.apiUrl}/service/moltoinchi`, {mol: serializedMolecule},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}}).subscribe((res: any) => {\n      this.logger.debug('received: ' + res);\n      if (typeof res !== 'undefined') {\n        if (typeof res.error !== 'undefined') {\n          if (errorCallback) {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n\n        else if (res.inchikey) {\n           if (res.inchikey === '') {\n             callback(null);\n           }\n           else {\n             callback(res);\n           }\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }}, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * converts an InChI Key to a molecule\n   */\n  convertInchiKeyToMol = (inchiKey, callback, errorCallback) => {\n    this.http.get(`${this.apiUrl}/service/inchikeytomol/${inchiKey}`).subscribe((res: any) => {\n      if (typeof res !== 'undefined') {\n        if (res.error !== '') {\n          if (errorCallback) {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n        else if (res.molecule) {\n          if (res.molecule === '' || res.molecule === null) {\n            callback(null);\n          }\n          else {\n            callback(res.molecule);\n          }\n        }\n\n      }\n    }, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * utilizes chemspider to convert from a smiles to an inchi\n   */\n  convertSmileToInChICode =  (smiles, callback, errorCallback) => {\n    const serializedSmiles = this.serializeData(smiles);\n    this.http.post(`${this.apiUrl}/service/smiletoinchi`, {smiles: serializedSmiles.trim()},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}}).subscribe((res: any) => {\n        if (typeof res !== 'undefined') {\n          if (typeof res.error !== 'undefined') {\n            if (typeof errorCallback !== 'undefined') {\n              errorCallback(res.error);\n            }\n            else {\n              this.logger.warn('no error message provided');\n            }\n          }\n          else if (typeof res.inchikey !== 'undefined') {\n            if (res.inchikey === '') {\n              callback(null);\n            }\n            else {\n              callback(res);\n            }\n          }\n        }\n        else {\n          this.logger.debug('no data object id defined!');\n        }\n    }, (error) => {\n      if (typeof errorCallback !== 'undefined') {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * converts an inchi code to an inchi keyß\n   */\n  convertInChICodeToKey = (inchiCode, callback, errorCallback) => {\n    const serializedInchiCode = this.serializeData(inchiCode);\n    this.http.post(`${this.apiUrl}/service/inchicodetoinchikey`, {inchicode: serializedInchiCode},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}})\n    .subscribe((res: any) => {\n\n      if (typeof res !== 'undefined') {\n        if (typeof res.error !== 'undefined') {\n          if (typeof errorCallback !== 'undefined') {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n        else if (typeof res.inchikey !== 'undefined') {\n          if (res.inchikey === '') {\n            callback(null);\n          }\n          else {\n            callback(res.inchikey);\n          }\n        }\n\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }, (error) => {\n      if (typeof errorCallback !== 'undefined') {\n        errorCallback(error);\n      }\n      else {\n        if (error !== null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * provides us with the molfile for this key\n   */\n  convertInChICodeToMol = (inchiCode, callback, errorCallback) => {\n    const serializedInchiCode = this.serializeData(inchiCode);\n    return this.http.post(`${this.apiUrl}/service/inchitomol`, { inchicode: serializedInchiCode },\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}})\n      .subscribe((res: any) => {\n        if (typeof res !== 'undefined') {\n          if (typeof res.error !== 'undefined') {\n            if (typeof errorCallback !== 'undefined') {\n              errorCallback(res.error);\n            }\n            else {\n              this.logger.warn('no error message provided!');\n            }\n          }\n          else if (typeof res.molecule !== 'undefined') {\n            if (res.molecule === '') {\n              callback(null);\n            }\n            else {\n              callback(res.molecule);\n            }\n          }\n\n        }\n        else {\n          this.logger.debug('no data object is defined!');\n        }\n      }, (error) => {\n        if (typeof errorCallback !== 'undefined') {\n          errorCallback(error);\n        }\n        else {\n          if (error != null) {\n            this.logger.warn('error: ' + error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n      });\n    }\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {NGXLogger} from 'ngx-logger';\nimport {CtsConstants} from './cts-constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChemifyService{\n  apiUrl;\n  constructor(@Inject(HttpClient) public http: HttpClient, @Inject(NGXLogger) public logger: NGXLogger,\n              @Inject(CtsConstants) public ctsConstants: CtsConstants) {\n    this.apiUrl = ctsConstants.apiUrl;\n    console.log(this.ctsConstants.apiUrl);\n    console.log(this.apiUrl);\n  }\n\n  /**\n   * converts the given name to an InChI Key\n   */\n  nameToInChIKey = (chemicalName, callback, errorCallback) => {\n\n    this.http.get(`${this.apiUrl}/chemify/rest/identify/${encodeURI(chemicalName)}`)\n      .subscribe((res) => {\n        const result = '';\n\n        if (typeof res !== 'undefined') {\n          const data = res;\n          if (Array.isArray(data)) {\n            if (data.length > 0) {\n              const topHit = data[0];\n              if (typeof topHit.result !== 'undefined') {\n                if (topHit.result === 'nothing found') {\n                  callback(null);\n                }\n                else {\n                  callback(topHit.result);\n                }\n              }\n            }\n          }\n        }\n      }, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n      });\n  }\n}\n","import {ModuleWithProviders, NgModule, Optional, SkipSelf} from '@angular/core';\nimport {HttpClientModule} from '@angular/common/http';\nimport {LoggerModule, NgxLoggerLevel} from 'ngx-logger';\nimport {CtsConstants} from './cts-constants';\nimport {CtsService} from './cts.service';\nimport {ChemifyService} from './chemify.service';\n\n@NgModule({\n  imports: [\n    LoggerModule.forRoot({\n      level: NgxLoggerLevel.DEBUG,\n      serverLogLevel: NgxLoggerLevel.OFF\n    }),\n    HttpClientModule\n  ],\n  providers: [\n    CtsConstants,\n    CtsService,\n    ChemifyService\n  ]\n})\nexport class CtsLibModule {\n  static forRoot(config: CtsConstants): ModuleWithProviders<CtsLibModule> {\n    console.log(config);\n    return {\n      ngModule: CtsLibModule,\n      providers: [\n        {provide: CtsConstants, useValue: config}\n      ]\n    };\n  }\n}\n"]}