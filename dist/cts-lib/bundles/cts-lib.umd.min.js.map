{"version":3,"sources":["../../../projects/cts-lib/src/lib/cts-constants.ts","../../../projects/cts-lib/src/lib/cts.service.ts","../../../projects/cts-lib/src/lib/chemify.service.ts","../../../projects/cts-lib/src/lib/cts-lib.module.ts"],"names":["CtsConstants","apiUrl","http","logger","_this","this","serializeData","data","toString","buffer","name","hasOwnProperty","value","push","encodeURIComponent","join","replace","convertToInchiKey","molecule","callback","errorCallback","serializedMolecule","post","mol","headers","Content-Type","subscribe","res","debug","error","warn","inchikey","convertInchiKeyToMol","inchiKey","get","convertSmileToInChICode","smiles","serializedSmiles","trim","convertInChICodeToKey","inchiCode","serializedInchiCode","inchicode","convertInChICodeToMol","CtsService","i0","ɵɵinject","HttpClient","NGXLogger","factory","ɵfac","providedIn","nameToInChIKey","chemicalName","encodeURI","Array","isArray","length","topHit","result","ChemifyService","CtsLibModule","providers","imports","LoggerModule","forRoot","level","NgxLoggerLevel","DEBUG","serverLogLevel","OFF","HttpClientModule","i2"],"mappings":"2aAAA,aACgBA,EAAAC,OAAiB,wCCS/B,SAAwCC,EAA6CC,GAArF,IAAAC,EAAAC,KAAwCA,KAAAH,KAAAA,EAA6CG,KAAAF,OAAAA,EAE7EE,KAAAC,cAAgB,SAACC,GACvB,GAAoB,iBAATA,GAA8B,OAATA,EAC9B,OAAmB,MAARA,EAAiB,GAAKA,EAAKC,WAGxC,IAAMC,EAAS,GAEf,IAAK,IAAMC,KAAQH,EACjB,GAAKA,EAAKI,eAAeD,GAAzB,CAIA,IAAME,EAAQL,EAAKG,GACnBD,EAAOI,KAAKC,mBAAmBJ,GAAQ,IAAMI,mBAA8B,MAATF,EAAkB,GAAKA,IAK3F,OAFeH,EAAOM,KAAK,KAAKC,QAAQ,OAAQ,MAQlDX,KAAAY,kBAAqB,SAACC,EAAUC,EAAUC,GACxC,IAAMC,EAAqBjB,EAAKE,cAAcY,GAC9Cd,EAAKF,KAAKoB,KAAQtB,EAAaC,OAAM,sBAAuB,CAACsB,IAAKF,GAChE,CAACG,QAAS,CAACC,eAAgB,sDAAsDC,WAAU,SAACC,GAC5FvB,EAAKD,OAAOyB,MAAM,aAAeD,QACd,IAARA,SACgB,IAAdA,EAAIE,MACTT,EACFA,EAAcO,EAAIE,OAGlBzB,EAAKD,OAAO2B,KAAK,8BAIZH,EAAII,SACW,KAAjBJ,EAAII,SACNZ,EAAS,MAGTA,EAASQ,GAIdvB,EAAKD,OAAOyB,MAAM,kCAElB,SAACC,GACCT,EACFA,EAAcS,GAGD,MAATA,EACFzB,EAAKD,OAAO2B,KAAK,UAAYD,GAG7BzB,EAAKD,OAAO2B,KAAK,kCASzBzB,KAAA2B,qBAAuB,SAACC,EAAUd,EAAUC,GAC1ChB,EAAKF,KAAKgC,IAAOlC,EAAaC,OAAM,0BAA0BgC,GAAYP,WAAU,SAACC,QAChE,IAARA,IACS,KAAdA,EAAIE,MACFT,EACFA,EAAcO,EAAIE,OAGlBzB,EAAKD,OAAO2B,KAAK,8BAGZH,EAAIT,WACU,KAAjBS,EAAIT,UAAoC,OAAjBS,EAAIT,SAC7BC,EAAS,MAGTA,EAASQ,EAAIT,eAKlB,SAACW,GACET,EACFA,EAAcS,GAGD,MAATA,EACFzB,EAAKD,OAAO2B,KAAK,UAAYD,GAG7BzB,EAAKD,OAAO2B,KAAK,kCASzBzB,KAAA8B,wBAA2B,SAACC,EAAQjB,EAAUC,GAC5C,IAAMiB,EAAmBjC,EAAKE,cAAc8B,GAC5ChC,EAAKF,KAAKoB,KAAQtB,EAAaC,OAAM,wBAAyB,CAACmC,OAAQC,EAAiBC,QACtF,CAACd,QAAS,CAACC,eAAgB,sDAAsDC,WAAU,SAACC,QACvE,IAARA,OACgB,IAAdA,EAAIE,WACgB,IAAlBT,EACTA,EAAcO,EAAIE,OAGlBzB,EAAKD,OAAO2B,KAAK,kCAGY,IAAjBH,EAAII,WACG,KAAjBJ,EAAII,SACNZ,EAAS,MAGTA,EAASQ,IAKbvB,EAAKD,OAAOyB,MAAM,iCAErB,SAACC,QAC2B,IAAlBT,EACTA,EAAcS,GAGD,MAATA,EACFzB,EAAKD,OAAO2B,KAAK,UAAYD,GAG7BzB,EAAKD,OAAO2B,KAAK,kCASzBzB,KAAAkC,sBAAwB,SAACC,EAAWrB,EAAUC,GAC5C,IAAMqB,EAAsBrC,EAAKE,cAAckC,GAC/CpC,EAAKF,KAAKoB,KAAQtB,EAAaC,OAAM,+BAAgC,CAACyC,UAAWD,GAC/E,CAACjB,QAAS,CAACC,eAAgB,sDAC5BC,WAAU,SAACC,QAES,IAARA,OACgB,IAAdA,EAAIE,WACgB,IAAlBT,EACTA,EAAcO,EAAIE,OAGlBzB,EAAKD,OAAO2B,KAAK,mCAGY,IAAjBH,EAAII,WACG,KAAjBJ,EAAII,SACNZ,EAAS,MAGTA,EAASQ,EAAII,WAMjB3B,EAAKD,OAAOyB,MAAM,iCAEnB,SAACC,QAC2B,IAAlBT,EACTA,EAAcS,GAGA,OAAVA,EACFzB,EAAKD,OAAO2B,KAAK,UAAYD,GAG7BzB,EAAKD,OAAO2B,KAAK,kCASzBzB,KAAAsC,sBAAwB,SAACH,EAAWrB,EAAUC,GAC5C,IAAMqB,EAAsBrC,EAAKE,cAAckC,GAC/C,OAAOpC,EAAKF,KAAKoB,KAAQtB,EAAaC,OAAM,sBAAuB,CAAEyC,UAAWD,GAC9E,CAACjB,QAAS,CAACC,eAAgB,sDAC1BC,WAAU,SAACC,QACS,IAARA,OACgB,IAAdA,EAAIE,WACgB,IAAlBT,EACTA,EAAcO,EAAIE,OAGlBzB,EAAKD,OAAO2B,KAAK,mCAGY,IAAjBH,EAAIT,WACG,KAAjBS,EAAIT,SACNC,EAAS,MAGTA,EAASQ,EAAIT,WAMjBd,EAAKD,OAAOyB,MAAM,iCAEnB,SAACC,QAC2B,IAAlBT,EACTA,EAAcS,GAGD,MAATA,EACFzB,EAAKD,OAAO2B,KAAK,UAAYD,GAG7BzB,EAAKD,OAAO2B,KAAK,oEA5OhBc,GAAUC,EAAAC,SAEDC,EAAAA,YAAUF,EAAAC,SAAoCE,EAAAA,iDAFvDJ,EAAUK,QAAVL,EAAUM,KAAAC,WAFT,eCGZ,SAAwCjD,EAA6CC,GAArF,IAAAC,EAAAC,KAAwCA,KAAAH,KAAAA,EAA6CG,KAAAF,OAAAA,EAMrFE,KAAA+C,eAAiB,SAACC,EAAclC,EAAUC,GAExChB,EAAKF,KAAKgC,IAAOlC,EAAaC,OAAM,0BAA0BqD,UAAUD,IACrE3B,WAAU,SAACC,GAGV,QAAmB,IAARA,EAAqB,CAC9B,IAAMpB,EAAOoB,EACb,GAAI4B,MAAMC,QAAQjD,IACZA,EAAKkD,OAAS,EAAG,CACnB,IAAMC,EAASnD,EAAK,QACS,IAAlBmD,EAAOC,SACM,kBAAlBD,EAAOC,OACTxC,EAAS,MAGTA,EAASuC,EAAOC,cAMzB,SAAC9B,GACAT,EACFA,EAAcS,GAGD,MAATA,EACFzB,EAAKD,OAAO2B,KAAK,UAAYD,GAG7BzB,EAAKD,OAAO2B,KAAK,oEAtCd8B,GAAcf,EAAAC,SACLC,EAAAA,YAAUF,EAAAC,SAAoCE,EAAAA,iDADvDY,EAAcX,QAAdW,EAAcV,KAAAC,WAFb,eCed,6CAAaU,iEAAAA,IAAYC,UANZ,CACT9D,EACA4C,EACAgB,GACDG,QAAA,CAXQ,CACPC,EAAAA,aAAaC,QAAQ,CACnBC,MAAOC,EAAAA,eAAeC,MACtBC,eAAgBF,EAAAA,eAAeG,MAEjCC,EAAAA,sFAQSV,EAAY,CAAAE,QAAA,CAAAS,EAAAR,aARrBO,EAAAA","sourcesContent":["export class CtsConstants{\n  public static apiUrl: String = \"http://cts.fiehnlab.ucdavis.edu\";\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {NGXLogger} from 'ngx-logger';\nimport {CtsConstants} from './cts-constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CtsService {\n\n  constructor(@Inject(HttpClient) private http: HttpClient, @Inject(NGXLogger) private logger: NGXLogger) { }\n\n  private serializeData = (data) => {\n    if (typeof data !== 'object' && data !== null) {\n      return ( ( data == null ) ? '' : data.toString() );\n    }\n\n    const buffer = [];\n\n    for (const name in data) {\n      if (!data.hasOwnProperty(name)) {\n        continue;\n      }\n\n      const value = data[name];\n      buffer.push(encodeURIComponent(name) + '=' + encodeURIComponent(( value == null ) ? '' : value));\n    }\n\n    const source = buffer.join('&').replace(/%20/g, '+');\n\n    return (source);\n  }\n\n  /**\n   * converts the given Molecule to an InChI Key\n   */\n  convertToInchiKey =  (molecule, callback, errorCallback) => {\n    const serializedMolecule = this.serializeData(molecule);\n    this.http.post(`${CtsConstants.apiUrl}/service/moltoinchi`, {mol: serializedMolecule},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}}).subscribe((res: any) => {\n      this.logger.debug('received: ' + res);\n      if (typeof res !== 'undefined') {\n        if (typeof res.error !== 'undefined') {\n          if (errorCallback) {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n\n        else if (res.inchikey) {\n           if (res.inchikey === '') {\n             callback(null);\n           }\n           else {\n             callback(res);\n           }\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }}, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * converts an InChI Key to a molecule\n   */\n  convertInchiKeyToMol = (inchiKey, callback, errorCallback) => {\n    this.http.get(`${CtsConstants.apiUrl}/service/inchikeytomol/${inchiKey}`).subscribe((res: any) => {\n      if (typeof res !== 'undefined') {\n        if (res.error !== '') {\n          if (errorCallback) {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n        else if (res.molecule) {\n          if (res.molecule === '' || res.molecule === null) {\n            callback(null);\n          }\n          else {\n            callback(res.molecule);\n          }\n        }\n\n      }\n    }, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * utilizes chemspider to convert from a smiles to an inchi\n   */\n  convertSmileToInChICode =  (smiles, callback, errorCallback) => {\n    const serializedSmiles = this.serializeData(smiles);\n    this.http.post(`${CtsConstants.apiUrl}/service/smiletoinchi`, {smiles: serializedSmiles.trim()},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}}).subscribe((res: any) => {\n        if (typeof res !== 'undefined') {\n          if (typeof res.error !== 'undefined') {\n            if (typeof errorCallback !== 'undefined') {\n              errorCallback(res.error);\n            }\n            else {\n              this.logger.warn('no error message provided');\n            }\n          }\n          else if (typeof res.inchikey !== 'undefined') {\n            if (res.inchikey === '') {\n              callback(null);\n            }\n            else {\n              callback(res);\n            }\n          }\n        }\n        else {\n          this.logger.debug('no data object id defined!');\n        }\n    }, (error) => {\n      if (typeof errorCallback !== 'undefined') {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * converts an inchi code to an inchi keyß\n   */\n  convertInChICodeToKey = (inchiCode, callback, errorCallback) => {\n    const serializedInchiCode = this.serializeData(inchiCode);\n    this.http.post(`${CtsConstants.apiUrl}/service/inchicodetoinchikey`, {inchicode: serializedInchiCode},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}})\n    .subscribe((res: any) => {\n\n      if (typeof res !== 'undefined') {\n        if (typeof res.error !== 'undefined') {\n          if (typeof errorCallback !== 'undefined') {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n        else if (typeof res.inchikey !== 'undefined') {\n          if (res.inchikey === '') {\n            callback(null);\n          }\n          else {\n            callback(res.inchikey);\n          }\n        }\n\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }, (error) => {\n      if (typeof errorCallback !== 'undefined') {\n        errorCallback(error);\n      }\n      else {\n        if (error !== null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * provides us with the molfile for this key\n   */\n  convertInChICodeToMol = (inchiCode, callback, errorCallback) => {\n    const serializedInchiCode = this.serializeData(inchiCode);\n    return this.http.post(`${CtsConstants.apiUrl}/service/inchitomol`, { inchicode: serializedInchiCode },\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}})\n      .subscribe((res: any) => {\n        if (typeof res !== 'undefined') {\n          if (typeof res.error !== 'undefined') {\n            if (typeof errorCallback !== 'undefined') {\n              errorCallback(res.error);\n            }\n            else {\n              this.logger.warn('no error message provided!');\n            }\n          }\n          else if (typeof res.molecule !== 'undefined') {\n            if (res.molecule === '') {\n              callback(null);\n            }\n            else {\n              callback(res.molecule);\n            }\n          }\n\n        }\n        else {\n          this.logger.debug('no data object is defined!');\n        }\n      }, (error) => {\n        if (typeof errorCallback !== 'undefined') {\n          errorCallback(error);\n        }\n        else {\n          if (error != null) {\n            this.logger.warn('error: ' + error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n      });\n    }\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {NGXLogger} from 'ngx-logger';\nimport {CtsConstants} from './cts-constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChemifyService{\n  constructor(@Inject(HttpClient) private http: HttpClient, @Inject(NGXLogger) private logger: NGXLogger) {\n  }\n\n  /**\n   * converts the given name to an InChI Key\n   */\n  nameToInChIKey = (chemicalName, callback, errorCallback) => {\n\n    this.http.get(`${CtsConstants.apiUrl}/chemify/rest/identify/${encodeURI(chemicalName)}`)\n      .subscribe((res) => {\n        const result = '';\n\n        if (typeof res !== 'undefined') {\n          const data = res;\n          if (Array.isArray(data)) {\n            if (data.length > 0) {\n              const topHit = data[0];\n              if (typeof topHit.result !== 'undefined') {\n                if (topHit.result === 'nothing found') {\n                  callback(null);\n                }\n                else {\n                  callback(topHit.result);\n                }\n              }\n            }\n          }\n        }\n      }, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n      });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {HttpClientModule} from '@angular/common/http';\nimport {LoggerModule, NgxLoggerLevel} from 'ngx-logger';\nimport {CtsConstants} from './cts-constants';\nimport {CtsService} from './cts.service';\nimport {ChemifyService} from './chemify.service';\n\n@NgModule({\n  imports: [\n    LoggerModule.forRoot({\n      level: NgxLoggerLevel.DEBUG,\n      serverLogLevel: NgxLoggerLevel.OFF\n    }),\n    HttpClientModule\n  ],\n  providers: [\n    CtsConstants,\n    CtsService,\n    ChemifyService\n  ]\n})\nexport class CtsLibModule { }\n"]}