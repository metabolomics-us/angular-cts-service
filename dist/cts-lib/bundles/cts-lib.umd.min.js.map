{"version":3,"sources":["../../../projects/cts-lib/src/lib/cts-constant-token.service.ts","../../../projects/cts-lib/src/lib/cts.service.ts","../../../projects/cts-lib/src/lib/chemify.service.ts","../../../projects/cts-lib/src/lib/cts-lib.module.ts"],"names":["CtsConstantTokenService","InjectionToken","CtsService","http","logger","config","this","serializeData","data","toString","buffer","name","hasOwnProperty","value","push","encodeURIComponent","join","replace","apiUrl","prototype","convertToInchiKey","molecule","callback","errorCallback","_this","serializedMolecule","post","mol","headers","Content-Type","subscribe","res","debug","error","warn","inchikey","convertInchiKeyToMol","inchiKey","get","convertSmileToInChICode","smiles","serializedSmiles","trim","convertInChICodeToKey","inchiCode","serializedInchiCode","inchicode","convertInChICodeToMol","i0","ɵɵinject","HttpClient","NGXLogger","factory","ɵfac","providedIn","ChemifyService","nameToInChIKey","chemicalName","encodeURI","Array","isArray","length","topHit","result","CtsLibModule","forRoot","ngModule","providers","provide","useValue","imports","LoggerModule","level","NgxLoggerLevel","DEBUG","serverLogLevel","OFF","HttpClientModule","i2"],"mappings":"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","sourcesContent":["import {InjectionToken} from '@angular/core';\nimport {CtsConstant} from './cts-constant';\n\nexport const CtsConstantTokenService = new InjectionToken<CtsConstant>(\n  'CtsConstant'\n);\n","import {Inject, Injectable, Optional} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {NGXLogger} from 'ngx-logger';\nimport {CtsConstantTokenService} from './cts-constant-token.service';\nimport {CtsConstant} from './cts-constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CtsService {\n  apiUrl;\n\n  constructor(@Inject(HttpClient) public http: HttpClient, @Inject(NGXLogger) public logger: NGXLogger,\n              @Inject(CtsConstantTokenService) public config: CtsConstant) {\n    this.apiUrl = config.apiUrl;\n  }\n\n  private serializeData = (data) => {\n    if (typeof data !== 'object' && data !== null) {\n      return ( ( data == null ) ? '' : data.toString() );\n    }\n\n    const buffer = [];\n\n    for (const name in data) {\n      if (!data.hasOwnProperty(name)) {\n        continue;\n      }\n\n      const value = data[name];\n      buffer.push(encodeURIComponent(name) + '=' + encodeURIComponent(( value == null ) ? '' : value));\n    }\n\n    const source = buffer.join('&').replace(/%20/g, '+');\n\n    return (source);\n  }\n\n  /**\n   * converts the given Molecule to an InChI Key\n   */\n  convertToInchiKey(molecule, callback, errorCallback): void {\n    const serializedMolecule = this.serializeData(molecule);\n    this.http.post(`${this.apiUrl}/service/moltoinchi`, {mol: serializedMolecule},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}}).subscribe((res: any) => {\n      this.logger.debug('received: ' + res);\n      if (typeof res !== 'undefined') {\n        if (typeof res.error !== 'undefined') {\n          if (errorCallback) {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n\n        else if (res.inchikey) {\n           if (res.inchikey === '') {\n             callback(null);\n           }\n           else {\n             callback(res);\n           }\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }}, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * converts an InChI Key to a molecule\n   */\n  convertInchiKeyToMol(inchiKey, callback, errorCallback): void {\n    this.http.get(`${this.apiUrl}/service/inchikeytomol/${inchiKey}`).subscribe((res: any) => {\n      if (typeof res !== 'undefined') {\n        if (res.error !== '') {\n          if (errorCallback) {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n        else if (res.molecule) {\n          if (res.molecule === '' || res.molecule === null) {\n            callback(null);\n          }\n          else {\n            callback(res.molecule);\n          }\n        }\n\n      }\n    }, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * utilizes chemspider to convert from a smiles to an inchi\n   */\n  convertSmileToInChICode(smiles, callback, errorCallback): void {\n    const serializedSmiles = this.serializeData(smiles);\n    this.http.post(`${this.apiUrl}/service/smiletoinchi`, {smiles: serializedSmiles.trim()},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}}).subscribe((res: any) => {\n        if (typeof res !== 'undefined') {\n          if (typeof res.error !== 'undefined') {\n            if (typeof errorCallback !== 'undefined') {\n              errorCallback(res.error);\n            }\n            else {\n              this.logger.warn('no error message provided');\n            }\n          }\n          else if (typeof res.inchikey !== 'undefined') {\n            if (res.inchikey === '') {\n              callback(null);\n            }\n            else {\n              callback(res);\n            }\n          }\n        }\n        else {\n          this.logger.debug('no data object id defined!');\n        }\n    }, (error) => {\n      if (typeof errorCallback !== 'undefined') {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * converts an inchi code to an inchi keyß\n   */\n  convertInChICodeToKey(inchiCode, callback, errorCallback): void {\n    const serializedInchiCode = this.serializeData(inchiCode);\n    this.http.post(`${this.apiUrl}/service/inchicodetoinchikey`, {inchicode: serializedInchiCode},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}})\n    .subscribe((res: any) => {\n\n      if (typeof res !== 'undefined') {\n        if (typeof res.error !== 'undefined') {\n          if (typeof errorCallback !== 'undefined') {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n        else if (typeof res.inchikey !== 'undefined') {\n          if (res.inchikey === '') {\n            callback(null);\n          }\n          else {\n            callback(res.inchikey);\n          }\n        }\n\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }, (error) => {\n      if (typeof errorCallback !== 'undefined') {\n        errorCallback(error);\n      }\n      else {\n        if (error !== null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * provides us with the molfile for this key\n   */\n  convertInChICodeToMol(inchiCode, callback, errorCallback): void {\n    const serializedInchiCode = this.serializeData(inchiCode);\n    this.http.post(`${this.apiUrl}/service/inchitomol`, { inchicode: serializedInchiCode },\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}})\n      .subscribe((res: any) => {\n        if (typeof res !== 'undefined') {\n          if (typeof res.error !== 'undefined') {\n            if (typeof errorCallback !== 'undefined') {\n              errorCallback(res.error);\n            }\n            else {\n              this.logger.warn('no error message provided!');\n            }\n          }\n          else if (typeof res.molecule !== 'undefined') {\n            if (res.molecule === '') {\n              callback(null);\n            }\n            else {\n              callback(res.molecule);\n            }\n          }\n\n        }\n        else {\n          this.logger.debug('no data object is defined!');\n        }\n      }, (error) => {\n        if (typeof errorCallback !== 'undefined') {\n          errorCallback(error);\n        }\n        else {\n          if (error != null) {\n            this.logger.warn('error: ' + error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n      });\n    }\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {NGXLogger} from 'ngx-logger';\nimport {CtsConstantTokenService} from './cts-constant-token.service';\nimport {CtsConstant} from './cts-constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChemifyService{\n  apiUrl;\n  constructor(@Inject(HttpClient) public http: HttpClient, @Inject(NGXLogger) public logger: NGXLogger,\n              @Inject(CtsConstantTokenService) public config: CtsConstant) {\n    this.apiUrl = config.apiUrl;\n  }\n\n  /**\n   * converts the given name to an InChI Key\n   */\n  nameToInChIKey(chemicalName, callback, errorCallback): void{\n    this.http.get(`${this.apiUrl}/chemify/rest/identify/${encodeURI(chemicalName)}`)\n      .subscribe((res) => {\n        const result = '';\n\n        if (typeof res !== 'undefined') {\n          const data = res;\n          if (Array.isArray(data)) {\n            if (data.length > 0) {\n              const topHit = data[0];\n              if (typeof topHit.result !== 'undefined') {\n                if (topHit.result === 'nothing found') {\n                  callback(null);\n                }\n                else {\n                  callback(topHit.result);\n                }\n              }\n            }\n          }\n        }\n      }, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n      });\n  }\n}\n","import {ModuleWithProviders, NgModule, Optional, SkipSelf} from '@angular/core';\nimport {HttpClientModule} from '@angular/common/http';\nimport {LoggerModule, NgxLoggerLevel} from 'ngx-logger';\n\nimport {CtsService} from './cts.service';\nimport {ChemifyService} from './chemify.service';\nimport {CtsConstant} from './cts-constant';\nimport {CtsConstantTokenService} from './cts-constant-token.service';\n\n@NgModule({\n  imports: [\n    LoggerModule.forRoot({\n      level: NgxLoggerLevel.DEBUG,\n      serverLogLevel: NgxLoggerLevel.OFF\n    }),\n    HttpClientModule\n  ]\n})\nexport class CtsLibModule {\n  static forRoot(config: CtsConstant): ModuleWithProviders<CtsLibModule> {\n    return {\n      ngModule: CtsLibModule,\n      providers: [\n        CtsService,\n        ChemifyService,\n        {\n          provide: CtsConstantTokenService,\n          useValue: config\n        }\n      ]\n    };\n  }\n}\n"]}