{"version":3,"sources":["../../../projects/cts-lib/src/lib/cts-constants.ts","../../../projects/cts-lib/src/lib/cts.service.ts","../../../projects/cts-lib/src/lib/chemify.service.ts","../../../projects/cts-lib/src/lib/cts-lib.module.ts"],"names":["this","apiUrl","CtsService","http","logger","ctsConstant","serializeData","data","toString","buffer","name","hasOwnProperty","value","push","encodeURIComponent","join","replace","console","log","prototype","convertToInchiKey","molecule","callback","errorCallback","_this","info","serializedMolecule","post","mol","headers","Content-Type","subscribe","res","debug","error","warn","inchikey","convertInchiKeyToMol","inchiKey","get","convertSmileToInChICode","smiles","serializedSmiles","trim","convertInChICodeToKey","inchiCode","serializedInchiCode","inchicode","convertInChICodeToMol","i0","ɵɵinject","HttpClient","NGXLogger","CtsConstants","factory","ɵfac","providedIn","ChemifyService","ctsConstants","nameToInChIKey","chemicalName","encodeURI","Array","isArray","length","topHit","result","CtsLibModule","forRoot","config","ngModule","providers","provide","useValue","imports","LoggerModule","level","NgxLoggerLevel","DEBUG","serverLogLevel","OFF","HttpClientModule","i2"],"mappings":"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","sourcesContent":["export class CtsConstants{\n  apiUrl = '';\n}\n","import {Inject, Injectable, Optional} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {NGXLogger} from 'ngx-logger';\nimport {CtsConstants} from './cts-constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CtsService {\n  apiUrl;\n\n  constructor(@Inject(HttpClient) public http: HttpClient, @Inject(NGXLogger) public logger: NGXLogger,\n              @Inject(CtsConstants) public ctsConstant: CtsConstants) {\n    this.apiUrl = ctsConstant.apiUrl;\n    console.log(this.ctsConstant.apiUrl);\n    console.log(this.apiUrl);\n  }\n\n  private serializeData = (data) => {\n    if (typeof data !== 'object' && data !== null) {\n      return ( ( data == null ) ? '' : data.toString() );\n    }\n\n    const buffer = [];\n\n    for (const name in data) {\n      if (!data.hasOwnProperty(name)) {\n        continue;\n      }\n\n      const value = data[name];\n      buffer.push(encodeURIComponent(name) + '=' + encodeURIComponent(( value == null ) ? '' : value));\n    }\n\n    const source = buffer.join('&').replace(/%20/g, '+');\n\n    return (source);\n  }\n\n  /**\n   * converts the given Molecule to an InChI Key\n   */\n  convertToInchiKey(molecule, callback, errorCallback): void {\n    this.logger.info(this.apiUrl);\n    this.logger.info(this.ctsConstant.apiUrl);\n    const serializedMolecule = this.serializeData(molecule);\n    this.http.post(`${this.apiUrl}/service/moltoinchi`, {mol: serializedMolecule},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}}).subscribe((res: any) => {\n      this.logger.debug('received: ' + res);\n      if (typeof res !== 'undefined') {\n        if (typeof res.error !== 'undefined') {\n          if (errorCallback) {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n\n        else if (res.inchikey) {\n           if (res.inchikey === '') {\n             callback(null);\n           }\n           else {\n             callback(res);\n           }\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }}, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * converts an InChI Key to a molecule\n   */\n  convertInchiKeyToMol(inchiKey, callback, errorCallback): void {\n    this.logger.info(this.apiUrl);\n    this.logger.info(this.ctsConstant.apiUrl);\n    this.http.get(`${this.apiUrl}/service/inchikeytomol/${inchiKey}`).subscribe((res: any) => {\n      if (typeof res !== 'undefined') {\n        if (res.error !== '') {\n          if (errorCallback) {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n        else if (res.molecule) {\n          if (res.molecule === '' || res.molecule === null) {\n            callback(null);\n          }\n          else {\n            callback(res.molecule);\n          }\n        }\n\n      }\n    }, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * utilizes chemspider to convert from a smiles to an inchi\n   */\n  convertSmileToInChICode(smiles, callback, errorCallback): void {\n    this.logger.info(this.apiUrl);\n    this.logger.info(this.ctsConstant.apiUrl);\n    const serializedSmiles = this.serializeData(smiles);\n    this.http.post(`${this.apiUrl}/service/smiletoinchi`, {smiles: serializedSmiles.trim()},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}}).subscribe((res: any) => {\n        if (typeof res !== 'undefined') {\n          if (typeof res.error !== 'undefined') {\n            if (typeof errorCallback !== 'undefined') {\n              errorCallback(res.error);\n            }\n            else {\n              this.logger.warn('no error message provided');\n            }\n          }\n          else if (typeof res.inchikey !== 'undefined') {\n            if (res.inchikey === '') {\n              callback(null);\n            }\n            else {\n              callback(res);\n            }\n          }\n        }\n        else {\n          this.logger.debug('no data object id defined!');\n        }\n    }, (error) => {\n      if (typeof errorCallback !== 'undefined') {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * converts an inchi code to an inchi keyß\n   */\n  convertInChICodeToKey(inchiCode, callback, errorCallback): void {\n    this.logger.info(this.apiUrl);\n    this.logger.info(this.ctsConstant.apiUrl);\n    const serializedInchiCode = this.serializeData(inchiCode);\n    this.http.post(`${this.apiUrl}/service/inchicodetoinchikey`, {inchicode: serializedInchiCode},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}})\n    .subscribe((res: any) => {\n\n      if (typeof res !== 'undefined') {\n        if (typeof res.error !== 'undefined') {\n          if (typeof errorCallback !== 'undefined') {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n        else if (typeof res.inchikey !== 'undefined') {\n          if (res.inchikey === '') {\n            callback(null);\n          }\n          else {\n            callback(res.inchikey);\n          }\n        }\n\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }, (error) => {\n      if (typeof errorCallback !== 'undefined') {\n        errorCallback(error);\n      }\n      else {\n        if (error !== null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * provides us with the molfile for this key\n   */\n  convertInChICodeToMol(inchiCode, callback, errorCallback): void {\n    this.logger.info(this.apiUrl);\n    this.logger.info(this.ctsConstant.apiUrl);\n    const serializedInchiCode = this.serializeData(inchiCode);\n    this.http.post(`${this.apiUrl}/service/inchitomol`, { inchicode: serializedInchiCode },\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}})\n      .subscribe((res: any) => {\n        if (typeof res !== 'undefined') {\n          if (typeof res.error !== 'undefined') {\n            if (typeof errorCallback !== 'undefined') {\n              errorCallback(res.error);\n            }\n            else {\n              this.logger.warn('no error message provided!');\n            }\n          }\n          else if (typeof res.molecule !== 'undefined') {\n            if (res.molecule === '') {\n              callback(null);\n            }\n            else {\n              callback(res.molecule);\n            }\n          }\n\n        }\n        else {\n          this.logger.debug('no data object is defined!');\n        }\n      }, (error) => {\n        if (typeof errorCallback !== 'undefined') {\n          errorCallback(error);\n        }\n        else {\n          if (error != null) {\n            this.logger.warn('error: ' + error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n      });\n    }\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {NGXLogger} from 'ngx-logger';\nimport {CtsConstants} from './cts-constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChemifyService{\n  apiUrl;\n  constructor(@Inject(HttpClient) public http: HttpClient, @Inject(NGXLogger) public logger: NGXLogger,\n              @Inject(CtsConstants) public ctsConstants: CtsConstants) {\n    this.apiUrl = ctsConstants.apiUrl;\n    logger.info(this.apiUrl);\n    logger.info(this.ctsConstants.apiUrl);\n  }\n\n  /**\n   * converts the given name to an InChI Key\n   */\n  nameToInChIKey(chemicalName, callback, errorCallback): void{\n    this.logger.info(this.apiUrl);\n    this.logger.info(this.ctsConstants.apiUrl);\n    this.http.get(`${this.apiUrl}/chemify/rest/identify/${encodeURI(chemicalName)}`)\n      .subscribe((res) => {\n        const result = '';\n\n        if (typeof res !== 'undefined') {\n          const data = res;\n          if (Array.isArray(data)) {\n            if (data.length > 0) {\n              const topHit = data[0];\n              if (typeof topHit.result !== 'undefined') {\n                if (topHit.result === 'nothing found') {\n                  callback(null);\n                }\n                else {\n                  callback(topHit.result);\n                }\n              }\n            }\n          }\n        }\n      }, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n      });\n  }\n}\n","import {ModuleWithProviders, NgModule, Optional, SkipSelf} from '@angular/core';\nimport {HttpClientModule} from '@angular/common/http';\nimport {LoggerModule, NgxLoggerLevel} from 'ngx-logger';\nimport {CtsConstants} from './cts-constants';\nimport {CtsService} from './cts.service';\nimport {ChemifyService} from './chemify.service';\n\n@NgModule({\n  imports: [\n    LoggerModule.forRoot({\n      level: NgxLoggerLevel.DEBUG,\n      serverLogLevel: NgxLoggerLevel.OFF\n    }),\n    HttpClientModule\n  ],\n  providers: [\n    CtsConstants,\n    CtsService,\n    ChemifyService\n  ]\n})\nexport class CtsLibModule {\n  static forRoot(config: CtsConstants): ModuleWithProviders<CtsLibModule> {\n    console.log(config);\n    return {\n      ngModule: CtsLibModule,\n      providers: [\n        {provide: CtsConstants, useValue: config}\n      ]\n    };\n  }\n}\n"]}