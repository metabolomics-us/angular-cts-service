{"version":3,"file":"cts-lib.umd.js","sources":["../../../projects/cts-lib/src/lib/cts-constants.ts","../../../projects/cts-lib/src/lib/cts.service.ts","../../../projects/cts-lib/src/lib/chemify.service.ts","../../../projects/cts-lib/src/lib/cts-lib.module.ts","../../../projects/cts-lib/src/public-api.ts","../../../projects/cts-lib/src/cts-lib.ts"],"sourcesContent":["export class CtsConstants{\n  public static apiUrl: String = \"http://cts.fiehnlab.ucdavis.edu\";\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {NGXLogger} from 'ngx-logger';\nimport {CtsConstants} from './cts-constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CtsService {\n\n  constructor(@Inject(HttpClient) private http: HttpClient, @Inject(NGXLogger) private logger: NGXLogger) { }\n\n  private serializeData = (data) => {\n    if (typeof data !== 'object' && data !== null) {\n      return ( ( data == null ) ? '' : data.toString() );\n    }\n\n    const buffer = [];\n\n    for (const name in data) {\n      if (!data.hasOwnProperty(name)) {\n        continue;\n      }\n\n      const value = data[name];\n      buffer.push(encodeURIComponent(name) + '=' + encodeURIComponent(( value == null ) ? '' : value));\n    }\n\n    const source = buffer.join('&').replace(/%20/g, '+');\n\n    return (source);\n  }\n\n  /**\n   * converts the given Molecule to an InChI Key\n   */\n  convertToInchiKey =  (molecule, callback, errorCallback) => {\n    const serializedMolecule = this.serializeData(molecule);\n    this.http.post(`${CtsConstants.apiUrl}/service/moltoinchi`, {mol: serializedMolecule},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}}).subscribe((res: any) => {\n      this.logger.debug('received: ' + res);\n      if (typeof res !== 'undefined') {\n        if (typeof res.error !== 'undefined') {\n          if (errorCallback) {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n\n        else if (res.inchikey) {\n           if (res.inchikey === '') {\n             callback(null);\n           }\n           else {\n             callback(res);\n           }\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }}, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * converts an InChI Key to a molecule\n   */\n  convertInchiKeyToMol = (inchiKey, callback, errorCallback) => {\n    this.http.get(`${CtsConstants.apiUrl}/service/inchikeytomol/${inchiKey}`).subscribe((res: any) => {\n      if (typeof res !== 'undefined') {\n        if (typeof res.error !== 'undefined') {\n          if (errorCallback) {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n        else if (res.molecule) {\n          if (res.molecule === '' || res.molecule === null) {\n            callback(null);\n          }\n          else {\n            callback(res.molecule);\n          }\n        }\n\n      }\n    }, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * utilizes chemspider to convert from a smiles to an inchi\n   */\n  convertSmileToInChICode =  (smiles, callback, errorCallback) => {\n    const serializedSmiles = this.serializeData(smiles);\n    this.http.post(`${CtsConstants.apiUrl}/service/smiletoinchi`, {smiles: serializedSmiles.trim()},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}}).subscribe((res: any) => {\n        if (typeof res !== 'undefined') {\n          if (typeof res.error !== 'undefined') {\n            if (typeof errorCallback !== 'undefined') {\n              errorCallback(res.error);\n            }\n            else {\n              this.logger.warn('no error message provided');\n            }\n          }\n          else if (typeof res.inchikey !== 'undefined') {\n            if (res.inchikey === '') {\n              callback(null);\n            }\n            else {\n              callback(res);\n            }\n          }\n        }\n        else {\n          this.logger.debug('no data object id defined!');\n        }\n    }, (error) => {\n      if (typeof errorCallback !== 'undefined') {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * converts an inchi code to an inchi keyÃŸ\n   */\n  convertInChICodeToKey = (inchiCode, callback, errorCallback) => {\n    const serializedInchiCode = this.serializeData(inchiCode);\n    this.http.post(`${CtsConstants.apiUrl}/service/inchicodetoinchikey`, {inchicode: serializedInchiCode},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}})\n    .subscribe((res: any) => {\n\n      if (typeof res !== 'undefined') {\n        if (typeof res.error !== 'undefined') {\n          if (typeof errorCallback !== 'undefined') {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n        else if (typeof res.inchikey !== 'undefined') {\n          if (res.inchikey === '') {\n            callback(null);\n          }\n          else {\n            callback(res.inchikey);\n          }\n        }\n\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }, (error) => {\n      if (typeof errorCallback !== 'undefined') {\n        errorCallback(error);\n      }\n      else {\n        if (error !== null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * provides us with the molfile for this key\n   */\n  convertInChICodeToMol = (inchiCode, callback, errorCallback) => {\n    const serializedInchiCode = this.serializeData(inchiCode);\n    return this.http.post(`${CtsConstants.apiUrl}/service/inchitomol`, { inchicode: serializedInchiCode },\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}})\n      .subscribe((res: any) => {\n        if (typeof res !== 'undefined') {\n          if (typeof res.error !== 'undefined') {\n            if (typeof errorCallback !== 'undefined') {\n              errorCallback(res.error);\n            }\n            else {\n              this.logger.warn('no error message provided!');\n            }\n          }\n          else if (typeof res.molecule !== 'undefined') {\n            if (res.molecule === '') {\n              callback(null);\n            }\n            else {\n              callback(res.molecule);\n            }\n          }\n\n        }\n        else {\n          this.logger.debug('no data object is defined!');\n        }\n      }, (error) => {\n        if (typeof errorCallback !== 'undefined') {\n          errorCallback(error);\n        }\n        else {\n          if (error != null) {\n            this.logger.warn('error: ' + error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n      });\n    }\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {NGXLogger} from 'ngx-logger';\nimport {CtsConstants} from './cts-constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChemifyService{\n  constructor(@Inject(HttpClient) private http: HttpClient, @Inject(NGXLogger) private logger: NGXLogger) {\n  }\n\n  /**\n   * converts the given name to an InChI Key\n   */\n  nameToInChIKey = (chemicalName, callback, errorCallback) => {\n\n    this.http.get(`${CtsConstants.apiUrl}/chemify/rest/identify/${encodeURI(chemicalName)}`)\n      .subscribe((res) => {\n        const result = '';\n\n        if (typeof res !== 'undefined') {\n          const data = res;\n          if (Array.isArray(data)) {\n            if (data.length > 0) {\n              const topHit = data[0];\n              if (typeof topHit.result !== 'undefined') {\n                if (topHit.result === 'nothing found') {\n                  callback(null);\n                }\n                else {\n                  callback(topHit.result);\n                }\n              }\n            }\n          }\n        }\n      }, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n      });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {HttpClientModule} from \"@angular/common/http\";\nimport{LoggerModule, NgxLoggerLevel} from \"ngx-logger\";\nimport {CtsConstants} from \"./cts-constants\";\nimport {CtsService} from \"./cts.service\";\nimport {ChemifyService} from \"./chemify.service\";\n\n@NgModule({\n  imports: [\n    LoggerModule.forRoot({\n      level: NgxLoggerLevel.DEBUG,\n      serverLogLevel: NgxLoggerLevel.OFF\n    }),\n    HttpClientModule\n  ],\n  providers: [\n    CtsConstants,\n    CtsService,\n    ChemifyService\n  ]\n})\nexport class CtsLibModule { }\n","/*\n * Public API Surface of cts-lib\n */\n\nexport * from './lib/cts.service';\nexport * from './lib/chemify.service';\nexport * from './lib/cts-lib.module';\nexport * from './lib/cts-constants';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["HttpClient","NGXLogger","Injectable","Inject","LoggerModule","NgxLoggerLevel","HttpClientModule","NgModule"],"mappings":"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"}