{"version":3,"file":"cts-lib.umd.js","sources":["../../../projects/cts-lib/src/lib/cts-constants.ts","../../../projects/cts-lib/src/lib/cts.service.ts","../../../projects/cts-lib/src/lib/chemify.service.ts","../../../projects/cts-lib/src/lib/cts-lib.module.ts","../../../projects/cts-lib/src/public-api.ts","../../../projects/cts-lib/src/cts-lib.ts"],"sourcesContent":["export class CtsConstants{\n  public static apiUrl: String = \"http://cts.fiehnlab.ucdavis.edu\";\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {NGXLogger} from \"ngx-logger\";\nimport {CtsConstants} from \"./cts-constants\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CtsService {\n\n  constructor(@Inject(HttpClient) private http: HttpClient, @Inject(NGXLogger) private logger: NGXLogger) { }\n\n  private serializeData = (data) => {\n    if (typeof data !== 'object' && data !== null) {\n      return ( ( data == null ) ? \"\" : data.toString() );\n    }\n\n    let buffer = [];\n\n    for (let name in data) {\n      if (!data.hasOwnProperty(name)) {\n        continue;\n      }\n\n      let value = data[name];\n      buffer.push(encodeURIComponent(name) + \"=\" + encodeURIComponent(( value == null ) ? \"\" : value));\n    }\n\n    let source = buffer.join(\"&\").replace(/%20/g, \"+\");\n\n    return (source);\n  }\n\n  /**\n   * converts the given Molecule to an InChI Key\n   * @param molecule\n   * @param callback\n   * @param errorCallback\n   */\n  convertToInchiKey =  (molecule) => {\n    let serializedMolecule = this.serializeData(molecule);\n    return this.http.post(`${CtsConstants.apiUrl}/service/moltoinchi`, {mol: serializedMolecule},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}});\n    /*\n    .then((res) => {\n\n      this.logger.debug('received: ' + res);\n\n      if (res) {\n        if (res[\"error\"]) {\n          if (errorCallback) {\n            errorCallback(res[\"error\"]);\n          }\n          else {\n            this.logger.warn(\"no error message provided!\");\n          }\n        }\n        else if (res[\"inchikey\"]) {\n          if (res[\"inchikey\"] === \"\") {\n            callback(null);\n          }\n          else {\n            callback(res);\n          }\n        }\n\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }).catch((error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn(\"no error message provided!\");\n        }\n      }\n    }); */\n  };\n\n  /**\n   * converts an InChI Key to a molecule\n   * @param inchiKey\n   * @param callback\n   * @param errorCallback\n   */\n  convertInchiKeyToMol = (inchiKey) => {\n    return this.http.get(`${CtsConstants.apiUrl}/service/inchikeytomol/${inchiKey}`);\n      /*.subscribe(\n      (res) => {\n          if (res[\"data\"]) {\n\n            let data = res[\"data\"];\n            if (data.error) {\n              if (errorCallback) {\n                errorCallback(data.error);\n              }\n              else {\n                this.logger.warn(\"no error message provided!\");\n              }\n            }\n            else if (data.molecule) {\n              if (data.molecule === \"\" || data.molecule === null) {\n                callback(null);\n              }\n              else {\n                callback(data.molecule);\n              }\n            }\n\n          }\n        }).catch((error) => {\n          if (errorCallback) {\n            errorCallback(error);\n          }\n          else {\n            if (error != null) {\n              this.logger.warn('error: ' + error);\n            }\n            else {\n              this.logger.warn(\"no error message provided!\");\n            }\n          }\n        });*/\n  };\n\n  /**\n   * utilizes chemspider to convert from a smiles to an inchi\n   * @param smiles\n   * @param callback\n   * @param errorCallback\n   */\n  convertSmileToInChICode =  (smiles) => {\n    let serializedSmiles = this.serializeData(smiles);\n    return this.http.post(`${CtsConstants.apiUrl}/service/smiletoinchi`, {smiles: serializedSmiles.trim()},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}})\n      /*\n      .then((res) => {\n        if (res) {\n          if (res[\"error\"]) {\n            if (errorCallback) {\n              errorCallback(res[\"errorr\"]);\n            }\n            else {\n              this.logger.warn(\"no error message provided!\");\n            }\n          }\n          else if (res[\"inchikey\"]) {\n            if (res[\"inchikey\"] === \"\") {\n              callback(null);\n            }\n            else {\n              callback(res);\n            }\n          }\n\n        }\n        else {\n          //$log.debug('no data object is defined!');\n        }\n      }).catch((error) => {\n        if (errorCallback) {\n          errorCallback(error);\n        }\n        else {\n          if (error != null) {\n            this.logger.warn('error: ' + error);\n          }\n          else {\n            this.logger.warn(\"no error message provided!\");\n          }\n        }\n      }); */\n  };\n\n  /**\n   * converts an inchi code to an inchi keyÃŸ\n   * @param inchiCode\n   * @param callback\n   * @param errorCallback\n   */\n  convertInChICodeToKey = (inchiCode) => {\n    let serializedInchiCode = this.serializeData(inchiCode);\n    return this.http.post(`${CtsConstants.apiUrl}/service/inchicodetoinchikey`, {inchicode: serializedInchiCode},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}});\n    /*\n    .then((res) => {\n\n      if (res) {\n\n        if (res[\"error\"]) {\n          if (errorCallback) {\n            errorCallback(res[\"error\"]);\n          }\n          else {\n            this.logger.warn(\"no error message provided!\");\n          }\n        }\n        else if (res[\"inchikey\"]) {\n          if (res[\"inchikey\"] === \"\") {\n            callback(null);\n          }\n          else {\n            callback(res[\"inchikey\"]);\n          }\n        }\n\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }).catch((error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn(\"no error message provided!\");\n        }\n      }\n    }); */\n  };\n\n  /**\n   * provides us with the molfile for this key\n   * @param inchiCode\n   * @param callback\n   * @param errorCallback\n   */\n  convertInChICodeToMol = (inchiCode) => {\n    let serializedInchiCode = this.serializeData(inchiCode);\n    return this.http.post(`${CtsConstants.apiUrl}/service/inchitomol`, { inchicode: serializedInchiCode },\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}});\n    /*\n      .then((res) => {\n        if (res) {\n\n          if (res[\"error\"]) {\n            if (errorCallback) {\n              errorCallback(res[\"error\"]);\n            }\n            else {\n              this.logger.warn(\"no error message provided!\");\n            }\n          }\n          else if (res[\"molecule\"]) {\n            if (res[\"molecule\"] === \"\") {\n              callback(null);\n            }\n            else {\n              callback(res[\"molecule\"]);\n            }\n          }\n\n        }\n        else {\n          this.logger.debug('no data object is defined!');\n        }\n      }).catch((error) => {\n        if (errorCallback) {\n          errorCallback(error);\n        }\n        else {\n          if (error != null) {\n            this.logger.warn('error: ' + error);\n          }\n          else {\n            this.logger.warn(\"no error message provided!\");\n          }\n        }\n      }); */\n    };\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {NGXLogger} from \"ngx-logger\";\nimport {CtsConstants} from \"./cts-constants\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChemifyService{\n  constructor(@Inject(HttpClient) private http: HttpClient, @Inject(NGXLogger) private logger: NGXLogger) {\n  }\n\n  /**\n   * converts the given name to an InChI Key\n   * @param chemicalName\n   * @param callback\n   */\n  nameToInChIKey = (chemicalName) => {\n\n    return this.http.get(`${CtsConstants.apiUrl}/chemify/rest/identify/${encodeURI(chemicalName)}`);\n    /*\n      .then((res) => {\n        let result = \"\";\n\n        if (res[\"data\"]) {\n          let data = res[\"data\"];\n          if (Array.isArray(data)) {\n            if (data.length > 0) {\n              let topHit = data[0];\n              if (topHit.result) {\n                if (topHit.result === 'nothing found') {\n                  callback(null);\n                }\n                else {\n                  callback(topHit.result);\n                }\n              }\n            }\n          }\n        }\n      }).catch((error) =>{\n        if (errorCallback) {\n          errorCallback(error);\n        }\n        else {\n          if (error != null) {\n            this.logger.warn('error: ' + error);\n          }\n          else {\n            this.logger.warn(\"no error message provided!\");\n          }\n        }\n      });\n     */\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {HttpClientModule} from \"@angular/common/http\";\nimport{LoggerModule, NgxLoggerLevel} from \"ngx-logger\";\nimport {CtsConstants} from \"./cts-constants\";\nimport {CtsService} from \"./cts.service\";\nimport {ChemifyService} from \"./chemify.service\";\n\n@NgModule({\n  imports: [\n    LoggerModule.forRoot({\n      level: NgxLoggerLevel.DEBUG,\n      serverLogLevel: NgxLoggerLevel.OFF\n    }),\n    HttpClientModule\n  ],\n  providers: [\n    CtsConstants,\n    CtsService,\n    ChemifyService\n  ]\n})\nexport class CtsLibModule { }\n","/*\n * Public API Surface of cts-lib\n */\n\nexport * from './lib/cts.service';\nexport * from './lib/chemify.service';\nexport * from './lib/cts-lib.module';\nexport * from './lib/cts-constants';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["HttpClient","NGXLogger","Injectable","Inject","LoggerModule","NgxLoggerLevel","HttpClientModule","NgModule"],"mappings":"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"}