{"version":3,"file":"cts-lib.umd.js","sources":["../../../projects/cts-lib/src/lib/cts-constant-token.service.ts","../../../projects/cts-lib/src/lib/cts.service.ts","../../../projects/cts-lib/src/lib/chemify.service.ts","../../../projects/cts-lib/src/lib/cts-lib.module.ts","../../../projects/cts-lib/src/public-api.ts","../../../projects/cts-lib/src/cts-lib.ts"],"sourcesContent":["import {InjectionToken} from '@angular/core';\nimport {CtsConstant} from './cts-constant';\n\nexport const CtsConstantTokenService = new InjectionToken<CtsConstant>(\n  'CtsConstant'\n);\n","import {Inject, Injectable, Optional} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {NGXLogger} from 'ngx-logger';\nimport {CtsConstantTokenService} from './cts-constant-token.service';\nimport {CtsConstant} from './cts-constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CtsService {\n  apiUrl;\n\n  constructor(@Inject(HttpClient) public http: HttpClient, @Inject(NGXLogger) public logger: NGXLogger,\n              @Inject(CtsConstantTokenService) public config: CtsConstant) {\n    this.apiUrl = config.apiUrl;\n    console.log(this.config.apiUrl);\n    console.log(this.apiUrl);\n  }\n\n  private serializeData = (data) => {\n    if (typeof data !== 'object' && data !== null) {\n      return ( ( data == null ) ? '' : data.toString() );\n    }\n\n    const buffer = [];\n\n    for (const name in data) {\n      if (!data.hasOwnProperty(name)) {\n        continue;\n      }\n\n      const value = data[name];\n      buffer.push(encodeURIComponent(name) + '=' + encodeURIComponent(( value == null ) ? '' : value));\n    }\n\n    const source = buffer.join('&').replace(/%20/g, '+');\n\n    return (source);\n  }\n\n  /**\n   * converts the given Molecule to an InChI Key\n   */\n  convertToInchiKey(molecule, callback, errorCallback): void {\n    this.logger.info(this.apiUrl);\n    const serializedMolecule = this.serializeData(molecule);\n    this.http.post(`${this.apiUrl}/service/moltoinchi`, {mol: serializedMolecule},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}}).subscribe((res: any) => {\n      this.logger.debug('received: ' + res);\n      if (typeof res !== 'undefined') {\n        if (typeof res.error !== 'undefined') {\n          if (errorCallback) {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n\n        else if (res.inchikey) {\n           if (res.inchikey === '') {\n             callback(null);\n           }\n           else {\n             callback(res);\n           }\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }}, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * converts an InChI Key to a molecule\n   */\n  convertInchiKeyToMol(inchiKey, callback, errorCallback): void {\n    this.logger.info(this.apiUrl);\n    this.http.get(`${this.apiUrl}/service/inchikeytomol/${inchiKey}`).subscribe((res: any) => {\n      if (typeof res !== 'undefined') {\n        if (res.error !== '') {\n          if (errorCallback) {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n        else if (res.molecule) {\n          if (res.molecule === '' || res.molecule === null) {\n            callback(null);\n          }\n          else {\n            callback(res.molecule);\n          }\n        }\n\n      }\n    }, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * utilizes chemspider to convert from a smiles to an inchi\n   */\n  convertSmileToInChICode(smiles, callback, errorCallback): void {\n    this.logger.info(this.apiUrl);\n    const serializedSmiles = this.serializeData(smiles);\n    this.http.post(`${this.apiUrl}/service/smiletoinchi`, {smiles: serializedSmiles.trim()},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}}).subscribe((res: any) => {\n        if (typeof res !== 'undefined') {\n          if (typeof res.error !== 'undefined') {\n            if (typeof errorCallback !== 'undefined') {\n              errorCallback(res.error);\n            }\n            else {\n              this.logger.warn('no error message provided');\n            }\n          }\n          else if (typeof res.inchikey !== 'undefined') {\n            if (res.inchikey === '') {\n              callback(null);\n            }\n            else {\n              callback(res);\n            }\n          }\n        }\n        else {\n          this.logger.debug('no data object id defined!');\n        }\n    }, (error) => {\n      if (typeof errorCallback !== 'undefined') {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * converts an inchi code to an inchi keyÃŸ\n   */\n  convertInChICodeToKey(inchiCode, callback, errorCallback): void {\n    this.logger.info(this.apiUrl);\n    const serializedInchiCode = this.serializeData(inchiCode);\n    this.http.post(`${this.apiUrl}/service/inchicodetoinchikey`, {inchicode: serializedInchiCode},\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}})\n    .subscribe((res: any) => {\n\n      if (typeof res !== 'undefined') {\n        if (typeof res.error !== 'undefined') {\n          if (typeof errorCallback !== 'undefined') {\n            errorCallback(res.error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n        else if (typeof res.inchikey !== 'undefined') {\n          if (res.inchikey === '') {\n            callback(null);\n          }\n          else {\n            callback(res.inchikey);\n          }\n        }\n\n      }\n      else {\n        this.logger.debug('no data object is defined!');\n      }\n    }, (error) => {\n      if (typeof errorCallback !== 'undefined') {\n        errorCallback(error);\n      }\n      else {\n        if (error !== null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n    });\n  }\n\n  /**\n   * provides us with the molfile for this key\n   */\n  convertInChICodeToMol(inchiCode, callback, errorCallback): void {\n    this.logger.info(this.apiUrl);\n    const serializedInchiCode = this.serializeData(inchiCode);\n    this.http.post(`${this.apiUrl}/service/inchitomol`, { inchicode: serializedInchiCode },\n      {headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'}})\n      .subscribe((res: any) => {\n        if (typeof res !== 'undefined') {\n          if (typeof res.error !== 'undefined') {\n            if (typeof errorCallback !== 'undefined') {\n              errorCallback(res.error);\n            }\n            else {\n              this.logger.warn('no error message provided!');\n            }\n          }\n          else if (typeof res.molecule !== 'undefined') {\n            if (res.molecule === '') {\n              callback(null);\n            }\n            else {\n              callback(res.molecule);\n            }\n          }\n\n        }\n        else {\n          this.logger.debug('no data object is defined!');\n        }\n      }, (error) => {\n        if (typeof errorCallback !== 'undefined') {\n          errorCallback(error);\n        }\n        else {\n          if (error != null) {\n            this.logger.warn('error: ' + error);\n          }\n          else {\n            this.logger.warn('no error message provided!');\n          }\n        }\n      });\n    }\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {NGXLogger} from 'ngx-logger';\nimport {CtsConstantTokenService} from './cts-constant-token.service';\nimport {CtsConstant} from './cts-constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChemifyService{\n  apiUrl;\n  constructor(@Inject(HttpClient) public http: HttpClient, @Inject(NGXLogger) public logger: NGXLogger,\n              @Inject(CtsConstantTokenService) public config: CtsConstant) {\n    this.apiUrl = config.apiUrl;\n    logger.info(this.apiUrl);\n    logger.info(this.config.apiUrl);\n  }\n\n  /**\n   * converts the given name to an InChI Key\n   */\n  nameToInChIKey(chemicalName, callback, errorCallback): void{\n    this.logger.info(this.apiUrl);\n    this.http.get(`${this.apiUrl}/chemify/rest/identify/${encodeURI(chemicalName)}`)\n      .subscribe((res) => {\n        const result = '';\n\n        if (typeof res !== 'undefined') {\n          const data = res;\n          if (Array.isArray(data)) {\n            if (data.length > 0) {\n              const topHit = data[0];\n              if (typeof topHit.result !== 'undefined') {\n                if (topHit.result === 'nothing found') {\n                  callback(null);\n                }\n                else {\n                  callback(topHit.result);\n                }\n              }\n            }\n          }\n        }\n      }, (error) => {\n      if (errorCallback) {\n        errorCallback(error);\n      }\n      else {\n        if (error != null) {\n          this.logger.warn('error: ' + error);\n        }\n        else {\n          this.logger.warn('no error message provided!');\n        }\n      }\n      });\n  }\n}\n","import {ModuleWithProviders, NgModule, Optional, SkipSelf} from '@angular/core';\nimport {HttpClientModule} from '@angular/common/http';\nimport {LoggerModule, NgxLoggerLevel} from 'ngx-logger';\n\nimport {CtsService} from './cts.service';\nimport {ChemifyService} from './chemify.service';\nimport {CtsConstant} from './cts-constant';\nimport {CtsConstantTokenService} from './cts-constant-token.service';\n\n@NgModule({\n  imports: [\n    LoggerModule.forRoot({\n      level: NgxLoggerLevel.DEBUG,\n      serverLogLevel: NgxLoggerLevel.OFF\n    }),\n    HttpClientModule\n  ]\n})\nexport class CtsLibModule {\n  static forRoot(config: CtsConstant): ModuleWithProviders<CtsLibModule> {\n    console.log(config);\n    return {\n      ngModule: CtsLibModule,\n      providers: [\n        CtsService,\n        ChemifyService,\n        {\n          provide: CtsConstantTokenService,\n          useValue: config\n        }\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of cts-lib\n */\n\nexport * from './lib/cts.service';\nexport * from './lib/chemify.service';\nexport * from './lib/cts-lib.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["InjectionToken","HttpClient","NGXLogger","Injectable","Inject","LoggerModule","NgxLoggerLevel","HttpClientModule","NgModule"],"mappings":"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"}